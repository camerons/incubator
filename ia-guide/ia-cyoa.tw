::StoryData
{
    "IFID": "5a7d6282-c043-49f6-872b-6518cf0391b6",
    "format": "chapbook-1",
    "start": "Start"
}

:: StoryTitle
Information Architecture


:: Start
userName: ' '
--

# Information Architecture

**[[Let's Start->Intro]]**

:: Intro
Let's go on an adventure into another world.
This world is not entirely different to your own, but it might have some unexpected treasures - and pitfalls - for you to find.
It's an adventure into the mind of your reader.
They live in your world, but they don't always think like you.
And learning to think like a reader can be tricky!

Have you ever been really good at something, and tried to show someone else how to do it?
It can be frustrating, because they just don't seem to get it, even though it seems easy and straight forward to you.
The technical name for this is the Curse of Knowledge, and it's what makes writing documentation hard.
Science tells us that the more you know about something, the less able you are to imagine what it's like not to know it.

Writers combat the Curse of Knowledge by putting themselves in the shoes of the reader.
And while this guide probably won't teach you to be a professional technical writer, it will definitely help you think about your reader, so that you can write better documentation.
It's a bit like having a writer in your pocket, giving you some hints and tips before you set out to start writing.

This guide is interactive, just click the option you like the most to move on.
It isn't a test!
You can't fail!
Just follow the prompts, and let us guide you into ...

the world of the reader ...

**[[Continue->Before you begin]]**

:: Before you begin

## Don't start yet!
When you're excited about a new project, it's super-tempting to just start writing the docs without thinking too hard about it.
**DON'T DO THIS!**

This guide is designed to get you thinking about your readers in such a way that you'll end up knowing what docs you need to write.
It won't take very long for you to get through this guide, and it will save you time in the long run.

By the end, you should have a good idea of who your main readers are, the kinds of things they are using your docs for, and what kinds of docs they might be expecting.
This will help you know which templates to use from the Good Docs Project, and give you the basics to start completing them.

If you don't want to do this using the interactive tool, you can [[click here]] to go to the static text.
Just have a piece of paper handy to write down the answers to the questions as you go.

Or, tell me your name:

{text input for: userName}

and we can [[get started->What are you writing about]]


:: What are you writing about
name: {userName}
--

Hi {username}! I'm so glad you decided to join me!

## What are you writing about?
The first thing we need to do is think about what you're writing about.
Are you writing about something pretty simple, that people can use without having any experience? Like a toaster?
Or are you writing about something a bit complicated, that people can start to use only after they've done a bit of reading, and might need to ask some questions as they go along? More like a car?
Or are you writing about something really tricky? Something that needs people to have a training course, a whole lot of background knowledge, and possibly a friend to help them the whole way? Like a nuclear reactor?

> [[Toaster->Writing about a toaster]]
> [[Car->Writing about a car]]
> [[Nuclear Reactor->Writing about a nuclear reactor]]


:: Writing about a toaster
## Writing about a toaster
Because the thing you are writing about is pretty simple and straightforward, you're probably thinking you don't need to spend much time writing docs.
Just because you might not need a lot of docs, you will still need something, though.
And working out what you need could be even more difficult, because you're going to need to think a little bit harder about who you're writing for.


**Curse of Knowledge alert!!**
Just because your toaster seems super simple to you, doesn't mean everyone will find it as easy as you do.
What if your reader doesn't speak the same language, or is a new migrant from a place with a totally different culture?
What if they are nine years old?
Or 99 years old?
What if they have a physical or mental disability?
When you are thinking about your readers, make sure you are thinking about everyone, not just people like you.

Now, let's [[move on->Who are you writing for?]]


:: Writing about a car
## Writing about a car
You lucky thing!
There is a pretty good chance that you needed to learn how to do this thing yourself, and hopefully it wasn't all that long ago, and you can fairly easily cast your mind back to those days when you didn't know what this thing was, or how it worked.
And if you didn't have to do this yourself, hopefully there is someone nearby who has, so go ask them questions!

**Curse of Knowledge alert!!**
Try to remember that not everyone knows the same stuff, or learns in the same way.
What if your reader doesn't speak the same language, or is a new migrant from a place with a totally different culture?
What if they are nine years old?
Or 99 years old?
What if they have a physical or mental disability?
When you are thinking about your readers, make sure you are thinking about everyone, not just people like you.

Now, let's [[move on->Who are you writing for?]]


:: Writing about a nuclear reactor
## Writing about a nuclear reactor
The first thing to work out if you are writing about a nuclear reactor is what reasonable assumptions can you make?
There's a fair chance that you can assume at least some kind of prior knowledge: a degree, some relevant experience, or perhaps using some other related tools or software.
When you have made these assumptions, write them down!
Put them right up front in your docs, so your readers can go away and learn something else first if they need to.
And be prepared to be challenged: you might discover in time that your assumptions are incorrect, and if that happens, you'll need to revisit your docs, too.


**Curse of Knowledge alert!!**
Try to remember that not everyone knows the same stuff, or learns in the same way.
What if your reader doesn't speak the same language, or is a new migrant from a place with a totally different culture?
What if they are nine years old?
Or 99 years old?
What if they have a physical or mental disability?
When you are thinking about your readers, make sure you are thinking about everyone, not just people like you.

Now, let's [[move on->Who are you writing for?]]


:: Who are you writing for?
readerName1: 'Alex'
readerName2: 'Bobbi'
readerName3: 'Charlie'
--

## Who are you writing for?
Now that we've thought what you're writing about, let's consider who you're writing for.
It would be easy to think of just one person that you're writing for, but we need to remember that people come in all shapes and sizes.
So let's think up three different people, to try and make sure we're covering all the options.

The way you categorize your three readers is up to you, but sometimes the best way to start is by thinking of a beginner, an intermediate reader, and an expert.
Or, depending on the kind of product you have, you might think of an ordinary user, a system administrator, and a support person.

Whichever you decide, your three readers should probably be interested in different parts of your product, they will be trying to do different tasks, and they will need different levels of help from your docs.
Don't be afraid to let them overlap a little bit, but try and make sure you've covered most of the options.

To get started with understanding your readers, you should probably give them names.
What would you like to call your first reader?

{text input for: readerName1}

What would you like to call your second reader?

{text input for: readerName2}

What would you like to call your third reader?

{text input for: readerName3}

Let's take a closer look at our readers, and work out [[Why do they read the docs?]]


:: Why do they read the docs?
readerName1: 'readerName1'
readerName2: 'readerName2'
readerName3: 'readerName3'
--

I'm going to tell you a secret.

People don't read the docs because they're a great read.

I know it's shocking, but literally no one is curling up at night with a warm drink and a great technical manual.

## Why do they read the docs?
If that's the case, why *do* people read docs?
Generally speaking, it's because they want to achieve something.
There's an anecdote that people don't go to the hardware store to buy a drill because they want a drill.
You buy a drill because you need a hole.
Your job as a writer is to work out why they need a hole, and give them the information they need to work out what tools to use to achieve it.

To put that in less abstract terms, you need to work out what problem your reader is trying to solve.
If Dusty needs to hang a picture, they might want to consult some documentation about the various ways they can go about that.
The documentation Dusty needs to do this would probably not be called "How to Choose to Drill".
The documentation Dusty needs is "How to Hang a Picture".
This is an important distinction, because if you get it wrong, your readers won't know if the content is right for them or, worse, they won't find your content at all.

So let's think about what our readers are trying to achieve.
Which one would you like to start with?

> [[Reader One->Reader One]]
> [[Reader Two->Reader Two]]
> [[Reader Three->Reader Three]]

When you've got tasks for all of your readers, let's put it all together, and think about [[Writing for your readers->Writing for your readers]]


:: Reader One
reader1action1: 'Install the product'
reader1action2: 'Perform initial setup'
reader1action3: 'Start their first project'
--

To understand {readerName1}, let's start by thinking about how they might begin.
What is the very first thing that {readerName1} might want to do?

{text input for: reader1action1}

Now let's assume that {readerName1} manages to complete {reader1action1} without any trouble.
What would be the second thing that they would want to do?

{text input for: reader1action2}

And now that they've managed to complete {reader1action2} what is the next thing?

{text input for: reader1action3}

Great! Now you have the three main things that a reader like {readerName1} might want to do, [[go back->Why do they read the docs?]] and do the same for {readerName2} and {readerName3}.
Or, if you're done, move on to [[Writing for your readers->Writing for your readers]]


:: Reader Two
reader2action1: 'Configure multiple users'
reader2action2: 'Troubleshoot networking problems'
reader2action3: 'Upgrade to a new version'
--

To understand {readerName2}, let's start by thinking about how they might begin.
What is the very first thing that {readerName2} might want to do?

{text input for: reader2action1}

Now let's assume that {readerName2} manages to complete {reader2action1} without any trouble.
What would be the second thing that they would want to do?

{text input for: reader2action2}

And now that they've managed to complete {reader2action2} what is the next thing?

{text input for: reader2action3}

Great! Now you have the three main things that a reader like {readerName2} might want to do, [[go back->Why do they read the docs?]] and do the same for {readerName3} and {readerName1}.
Or, if you're done, move on to [[Writing for your readers->Writing for your readers]]


:: Reader Three
reader3action1: 'Understand all the advanced features'
reader3action2: 'Switch from hosted services to local'
reader3action3: 'Shut down the reactor quickly during a meltdown'
--

To understand {readerName3}, let's start by thinking about how they might begin.
What is the very first thing that {readerName3} might want to do?

{text input for: reader3action1}

Now let's assume that {readerName3} manages to complete {reader3action1} without any trouble.
What would be the second thing that they would want to do?

{text input for: reader3action2}

And now that they've managed to complete {reader3action2} what is the next thing?

{text input for: reader3action3}

Great! Now you have the three main things that a reader like {readerName3} might want to do, [[go back->Why do they read the docs?]] and do the same for {readerName2} and {readerName1}.
Or, if you're done, move on to [[Writing for your readers->Writing for your readers]]


:: Writing for your readers
critpath1:''
critpath2:''
critpath3:''
critpath4:''
critpath5:''
critpath6:''
critpath7:''
critpath8:''
critpath9:''
critpath10:''
critpath11:''
critpath12:''
critpath13:''
critpath14:''
critpath15:''
critpath16:''
critpath17:''
critpath18:''
critpath19:''
critpath20:''
critpath21:''
critpath22:''
critpath23:''
critpath24:''
critpath25:''
critpath26:''
critpath27:''
reader1action1critscore: critpath1 + critpath2 + critpath3
reader1action2critscore: critpath4 + critpath5 + critpath6
reader1action3critscore: critpath7 + critpath8 + critpath9
reader2action1critscore: critpath10 + critpath11 + critpath12
reader2action2critscore: critpath13 + critpath14 + critpath15
reader2action3critscore: critpath16 + critpath17 + critpath18
reader3action1critscore: critpath19 + critpath20 + critpath21
reader3action2critscore: critpath22 + critpath23 + critpath24
reader3action3critscore: critpath25 + critpath26 + critpath27
--

## Writing for your readers
Now that you've had a think about who your readers are, and the kinds of things they might be using your documentation for, you can display them in a table like this:

<table>
    <tr>
        <th>Task</th>
        <th>{readerName1}</th>
        <th>{readerName2}</th>
        <th>{readerName3}</th>
        <th>Total Critical Path Score</th>
    </tr>
    <tr>
        <td>{reader1action1}</td>
        <td>{text input for: 'critpath1'}</td>
        <td>{text input for: 'critpath2'}</td>
        <td>{text input for: 'critpath3'}</td>
        <td>{reader1action1critscore}</td>
    </tr>
    <tr>
        <td>{reader1action2}</td>
        <td>{text input for: 'critpath4'}</td>
        <td>{text input for: 'critpath5'}</td>
        <td>{text input for: 'critpath6'}</td>
        <td>{reader1action2critscore}</td>
    </tr>
    <tr>
        <td>{reader1action3}</td>
        <td>{text input for: 'critpath7'}</td>
        <td>{text input for: 'critpath8'}</td>
        <td>{text input for: 'critpath9'}</td>
        <td>{reader1action3critscore}</td>
    </tr>
    <tr>
        <td>{reader2action1}</td>
        <td>{text input for: 'critpath10'}</td>
        <td>{text input for: 'critpath11'}</td>
        <td>{text input for: 'critpath12'}</td>
        <td>{reader2action1critscore}</td>
    </tr>
    <tr>
        <td>{reader2action2}</td>
        <td>{text input for: 'critpath13'}</td>
        <td>{text input for: 'critpath14'}</td>
        <td>{text input for: 'critpath15'}</td>
        <td>{reader2action2critscore}</td>
    </tr>
    <tr>
        <td>{reader2action3}</td>
        <td>{text input for: 'critpath16'}</td>
        <td>{text input for: 'critpath17'}</td>
        <td>{text input for: 'critpath18'}</td>
        <td>{reader2action3critscore}</td>
    </tr>
    <tr>
        <td>{reader3action1}</td>
        <td>{text input for: 'critpath19'}</td>
        <td>{text input for: 'critpath20'}</td>
        <td>{text input for: 'critpath21'}</td>
        <td>{reader3action1critscore}</td>
    </tr>
    <tr>
        <td>{reader3action2}</td>
        <td>{text input for: 'critpath22'}</td>
        <td>{text input for: 'critpath23'}</td>
        <td>{text input for: 'critpath24'}</td>
        <td>{reader3action2critscore}</td>
    </tr>
    <tr>
        <td>{reader3action3}</td>
        <td>{text input for: 'critpath25'}</td>
        <td>{text input for: 'critpath26'}</td>
        <td>{text input for: 'critpath27'}</td>
        <td>{reader3action3critscore}</td>
    </tr>
</table>

Now you just need to fill in the blank spaces!
Consider how likely the reader is to use the documentation to complete each task.
Score a **1** for a low likelihood, **2** for a medium likelihood, and **3** for a high likelihood.

**Curse of Knowledge alert!!**
Remember that this isn't how likely the reader is to do the task.
It's how likely the reader is to *use the documentation* to do the task.
A really experienced reader is not likely to need to the documentation for basic tasks like installation or setup, but they might need it for more advanced tasks.

When you have the numbers in, add up each row.
The rows that score the highest are what writers like to call *critical paths*.
Now you know what your critical paths are, you are ready to [[Identify the mess]]


:: Identify the mess
missingcontent1:''
missingcontent2:''
missingcontent3:''
missingcontent4:''
missingcontent5:''
missingcontent6:''
missingcontent7:''
missingcontent8:''
missingcontent9:''
--

## Identify the mess
It's time to turn our attention to what you already have.
If you have already made a start on the docs, that's great!
But even if you think you're starting writing from scratch, there's a reasonable chance you actually already have something.

Have a think about it:

* Have you written notes while you've been working?
    Even if they're just scratches on a notebook on your desk, that's documentation!
* Have you written any comments in your code?
    You really should have! They're documentation, too.
* Have you put a README in your code repository?
    That's also documentation!
* Have you given any talks or presentations about your project?
    Even if there isn't a recording, any notes or slides you made for that is documentation too!

Get all of these things together and look at them with your critical paths in mind.
Do you have content here that fits all those critical paths?
You will probably start to notice the gaps pretty quickly.
It could be that you have a whole lot of content that describes how to do it, but not a lot that explains what it is.
Or, you could have a lot of stuff aimed at beginners, and not a lot that works for experts.
Sometimes, you might find that you have a lot of descriptions of things, but not a lot of step-by-step instructions.

## What's missing?
Take a note of those things that are missing, and make sure you pay attention to which critical path they address.

* {reader1action1} {reader1action1critscore}: {text input for:missingcontent1}
* {reader1action2} {reader1action2critscore}: {text input for:missingcontent2}
* {reader1action3} {reader1action3critscore}: {text input for:missingcontent3}
* {reader2action1} {reader2action1critscore}: {text input for:missingcontent4}
* {reader2action2} {reader2action2critscore}: {text input for:missingcontent5}
* {reader2action3} {reader2action3critscore}: {text input for:missingcontent6}
* {reader3action1} {reader3action1critscore}: {text input for:missingcontent7}
* {reader3action2} {reader3action2critscore}: {text input for:missingcontent8}
* {reader3action3} {reader3action3critscore}: {text input for:missingcontent9}

At this stage, it's normal to be feeling a little overwhelmed by how much there still is to do.
So the very next step is to work out what we actually need, so we know we can cut some things from the list.
To do this, you need to [[State your intent->State your intent]]


:: State your intent
## State your intent

If you wanted to build a house, you wouldn't start laying bricks until you'd had a think about what kind of house you want to build.
How big is it going to be?
What materials are you going to use?
What layout and design is it going to have?

By the same token, you need to think about what you intend for your documentation.
Is it going to be comprehensive and detailed, or simple and sparse?
Is it going to use simple language, designed for people who have never done this before, or more technical  language, for people who know what they're doing and just need the basics?
Is it going to start from the very beginning, or are you going to assume that your readers already have some knowledge?

When you've considered these things, and determined the kind of documentation you want to make sure your project has, you're just about ready to [[Face reality->Face reality]]


:: Face reality

## Face reality
By now, you should have a good idea of what your ideal documentation would look like.
It would be wonderful!
A shining beacon of docs goodness, hitting all the critical paths for all your readers, and people will talk about it for years to come!

And it's probably about now that reality is going to come and burst your bubble.
How are you going to update and maintain your documentation?

It's a grim reality that project documentation needs to be maintained.
Have a think about how many writers your project might be able to access.
Are you likely to have writers on the project over time?
What skill  level are they likely to have?
Is there any content that already exists elsewhere that you can point to, rather than writing yourself?
Is there any way you can automate any part of the documentation, such as using code comments to generate API documentation?

Make sure you're not biting off more than you can chew, and [[Choose a direction->Choose a direction]]


:: Choose a direction

## Choose a direction
Now is when you really get to start making decisions.
We've done a lot of thinking about readers, and the kinds of things they might want to do.
We've also thought about the kind of content that you already have, and what might be missing.
We've also faced reality and recognised that you might not be able to create perfect docs, but you can certainly improve what you already have.

So, which docs do you think you're going to need?

Now you get to decide how to move forward.
That starts with [[Measuring the distance->Measure the distance]]


:: Measure the distance

## Measure the distance
Don't let your docs project be like your New Year resolutions, forgotten and lonely by the end of the year.
The best way to make sure you stick to your docs goals, is to work out how much you can do, and set a deadline for each step in the process.

The templates will help you understand how much work is involved in each of teh docs you want to write.
Have a read through the information for each template you want to use, and work out how much time you are going to need to work on it.

Then you can split up docs work like this:

* Planning - 20%
* Drafting - 50%
* Reviewing and editing - 20%
* Production - 10%

So, if you want to write a How-To, and you have five months to do it, you can work out how much time to spend on each task like this:

Three months = Around 100 working days, not counting weekends, and allowing for a few holidays.
You can adjust this however you like, if you're only working on weekends, for example, or if you have other projects to work on as well.

* Planning - 20 days (4 weeks)
* Drafting - 50 days (10 weeks)
* Review & edit - 20 days (4 weeks)
* Production - 10 days (2 weeks)

There's just one more thing you need to do: [[Prepare to adjust->Prepare to adjust]]


:: Prepare to adjust
## Prepare to adjust

Finally, the most important thing you need to do is to be flexible.
Things don't always work out, and that's OK!

Expect the unexpected.

Perhaps you get a new job and end up with no time to work on things.
If you've written down your plan, and spoken to others in your project about what you were going to do, others can pick up the work, and when you're able to, you can come back to it.

Perhaps you get an injection of cash and can hire some writers.
Go back to the critical paths, expand your scope, and hand that planning to them, so that they have somewhere to start, and underfstand your vision for the docs.

Or maybe things just don't work out, and the project ends up being abandoned entirely.
That's sad, but it's OK.
At least you've finished up with some valuable knowledge about creating docs, so you'll be even better for your next idea.

So, are you ready to get started?

[[Check out the templates->https://github.com/thegooddocsproject/templates/blob/master/README.md]]

[[Find out more about information architecture->Further reading]]


::Further reading
## Further Reading

This document was largely based on the brilliant book by Abby Covert called [[How to Make Sense of Any Mess->http://www.howtomakesenseofanymess.com/]].
It's a quick read, and it doesn't just apply to technical documentation, you can use the principles in that book to help you organise anything at all.

If you really want to delve into information architecture for technical documentation, the most important text you need is the O'Reilly book [[Information Architecture->https://www.oreilly.com/library/view/information-architecture-4th/9781491913529/]].
It has everything you need to know, including answers to questions you didn't know you needed to ask.
It has a polar bear on the cover.
